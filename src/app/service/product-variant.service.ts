import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { catchError, Observable, throwError } from 'rxjs';
import { ProductVariant } from '../types/product-variant';

@Injectable({
  providedIn: 'root',
})
export class ProductVariantService {
  private apiUrl = 'http://localhost:8080/api/v1/product_variants';

  constructor(private http: HttpClient) {}

  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('accessToken') || '';
    return new HttpHeaders({
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    });
  }

  // L·∫•y t·∫•t c·∫£ bi·∫øn th·ªÉ c·ªßa 1 product
  getAllVariantsByProductId(productId: number): Observable<ProductVariant[]> {
    return this.http.get<ProductVariant[]>(`${this.apiUrl}/${productId}`, {
      headers: this.getAuthHeaders(),
    });
  }
  /**
   * üè∑ **L·∫•y th√¥ng tin Brand theo `variantId`**
   * @param variantId ID c·ªßa bi·∫øn th·ªÉ s·∫£n ph·∫©m
   * @returns Observable ch·ª©a th√¥ng tin brand
   */
  getBrandByVariantId(variantId: number): Observable<any> {
    return this.http
      .get<any>(`${this.apiUrl}/${variantId}/brand`, {
        headers: this.getAuthHeaders(),
      })
      .pipe(
        catchError((error) => {
          console.error('L·ªói khi l·∫•y Brand:', error);
          return throwError(() => new Error('Kh√¥ng th·ªÉ l·∫•y th∆∞∆°ng hi·ªáu!'));
        })
      );
  }
   // ‚úÖ L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt bi·∫øn th·ªÉ s·∫£n ph·∫©m theo `variantId`
   getVariantById(variantId: number): Observable<ProductVariant> {
    return this.http.get<ProductVariant>(`${this.apiUrl}/variant/${variantId}`, {
      headers: this.getAuthHeaders(),
    });
  }

  // T·∫°o m·ªõi 1 bi·∫øn th·ªÉ
  createProductVariant(variant: ProductVariant): Observable<ProductVariant> {
    return this.http.post<ProductVariant>(this.apiUrl, variant, {
      headers: this.getAuthHeaders(),
    });
  }

  // C·∫≠p nh·∫≠t bi·∫øn th·ªÉ
  updateProductVariant(variantId: number, variant: ProductVariant): Observable<ProductVariant> {
    return this.http.put<ProductVariant>(`${this.apiUrl}/${variantId}`, variant, {
      headers: this.getAuthHeaders(),
    });
  }

  // X√≥a 1 bi·∫øn th·ªÉ
  deleteProductVariant(variantId: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${variantId}`, {
      headers: this.getAuthHeaders(),
      responseType: 'text', // Kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu, ch·ªâ tr·∫£ v·ªÅ m√£ HTTP status code
    });
  }
}
