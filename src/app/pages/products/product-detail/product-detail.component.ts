import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ProductService } from 'src/app/service/product.service';
import { ProductImageService } from 'src/app/service/product-image.service';
import { ProductVariantService } from 'src/app/service/product-variant.service';
import { CartService } from 'src/app/service/cart.service'; 
import { Product } from 'src/app/types/products';
import { ProductImage } from 'src/app/types/product-image';
import { ProductVariant } from 'src/app/types/product-variant';
import { TokenService } from 'src/app/service/token.service';
import { ToastrService } from 'ngx-toastr';


@Component({
  selector: 'app-product-detail',
  templateUrl: './product-detail.component.html',
  styleUrls: ['./product-detail.component.scss'],
})
export class ProductDetailComponent implements OnInit {
  
  product: Product = {} as Product;
  productImages: ProductImage[] = [];
  productVariants: ProductVariant[] = [];


  selectedImage: string = '';
  selectedColor: string = '';
  selectedSize: string = '';
  selectedVariant!: ProductVariant | null; // L∆∞u bi·∫øn th·ªÉ ƒë∆∞·ª£c ch·ªçn
  quantity = 1;
  productId!: number;

  userId: number | null = null;

  constructor(
    private route: ActivatedRoute,
    private productService: ProductService,
    private productImageService: ProductImageService,
    private productVariantService: ProductVariantService,
    private cartService: CartService ,
    private tokenService: TokenService ,
    private toastr: ToastrService  ,
    private renderer: Renderer2, //  D√πng ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng ·∫£nh bay
  private el: ElementRef //  L·∫•y v·ªã tr√≠ c·ªßa ph·∫ßn t·ª≠ trong DOM
  ) {}

  ngOnInit(): void {
    this.userId = this.tokenService.getUserId(); // üü¢ L·∫•y user ID
    this.route.paramMap.subscribe((params) => {
      this.productId = Number(params.get('id'));
      if (this.productId) {
        this.loadProductDetails();
      }
    });
  }


  

  loadProductDetails(): void {
    this.productService.getProductById(this.productId).subscribe(
      (data) => {
        this.product = data;
      },
      (error) => console.error('L·ªói khi t·∫£i s·∫£n ph·∫©m:', error)
    );

    this.productImageService.getAllProductImages(this.productId).subscribe(
      (data) => {
        this.productImages = data;
        this.selectedImage = this.productImages.length > 0 ? this.productImages[0].imageUrl : 'assets/images/default-product.jpg';
      },
      (error) => console.error('L·ªói khi t·∫£i ·∫£nh s·∫£n ph·∫©m:', error)
    );

    this.productVariantService.getAllVariantsByProductId(this.productId).subscribe(
      (data) => {
        this.productVariants = data;

        if (this.productVariants.length > 0) {
          this.selectedColor = this.productVariants[0].color || '';
          this.selectedSize = this.productVariants[0].size || '';
          this.updateSelectedVariant();
        }
      },
      (error) => console.error('L·ªói khi t·∫£i bi·∫øn th·ªÉ s·∫£n ph·∫©m:', error)
    );
  }

  updateSelectedVariant(): void {
    this.selectedVariant = this.productVariants.find(
      (variant) => variant.color === this.selectedColor && variant.size === this.selectedSize
    ) || null;
  }

  onSelectImage(img: string) {
    this.selectedImage = img;
  }

  onSelectColor(color: string) {
    this.selectedColor = color;
    this.updateSelectedVariant();
  
    // N·∫øu bi·∫øn th·ªÉ c√≥ ·∫£nh ri√™ng, thay ƒë·ªïi ·∫£nh ch√≠nh
    if (this.selectedVariant?.imageUrl) {
      this.selectedImage = this.selectedVariant.imageUrl;
    } else {
      // N·∫øu kh√¥ng c√≥ ·∫£nh bi·∫øn th·ªÉ, gi·ªØ nguy√™n ·∫£nh ch√≠nh ban ƒë·∫ßu
      this.selectedImage = this.productImages.length > 0 ? this.productImages[0].imageUrl : 'assets/images/default-product.jpg';
    }
  }
  

  onSelectSize(size: string) {
    this.selectedSize = size;
    this.updateSelectedVariant();
  }

  onIncreaseQuantity() {
    this.quantity++;
  }

  onDecreaseQuantity() {
    if (this.quantity > 1) {
      this.quantity--;
    }
  }

  onAddToCart(event: MouseEvent) {
    if (!this.selectedVariant) {
      this.toastr.warning('S·∫£n ph·∫´m ƒë√£ h·∫øt vui l√≤ng ch·ªçn s·∫£n ph·∫©m kh√°c !', 'Th√¥ng b√°o');
      return;
    }
    if (this.selectedVariant.stockQuantity < this.quantity) {
      this.toastr.error(`Ch·ªâ c√≤n ${this.selectedVariant.stockQuantity} s·∫£n ph·∫©m trong kho!`, 'L·ªói');
      return;
    }

    const userId = this.tokenService.getUserId();
    if (!userId) {
      this.toastr.error('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th√™m v√†o gi·ªè h√†ng!', 'L·ªói');
      return;
    }

    //  G·ªçi API th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    this.cartService.addItemToCart(this.selectedVariant.variantId, this.quantity).subscribe(
      (response) => {
        this.toastr.success('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!', 'Th√†nh c√¥ng');
        this.animateImageToCart(event); // G·ªçi hi·ªáu ·ª©ng bay ·∫£nh s·∫£n ph·∫©m
      },
      (error) => {
        this.toastr.error('L·ªói khi th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i!', 'L·ªói');
      }
    );
  }
  animateImageToCart(event: MouseEvent) {
    const cartIcon = document.querySelector('.cart-icon img'); // üõí Icon gi·ªè h√†ng
    const productImage = this.el.nativeElement.querySelector('.main-image img'); // üì∑ ·∫¢nh s·∫£n ph·∫©m ch√≠nh
  
    if (cartIcon && productImage) {
      const cartRect = cartIcon.getBoundingClientRect(); // L·∫•y t·ªça ƒë·ªô gi·ªè h√†ng
      const productRect = productImage.getBoundingClientRect(); // L·∫•y t·ªça ƒë·ªô ·∫£nh s·∫£n ph·∫©m
  
      // Kho·∫£ng c√°ch t·ª´ s·∫£n ph·∫©m ƒë·∫øn gi·ªè h√†ng
      let xDistance = cartRect.left - productRect.left;
      let yDistance = cartRect.top - productRect.top;
  
      // Ch·ªânh tay gi√° tr·ªã ƒë·ªÉ bay ch√≠nh x√°c h∆°n (B·∫°n c√≥ th·ªÉ thay ƒë·ªïi c√°c s·ªë n√†y)
      const xOffset = 3500;  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ ngang (tr√°i/ph·∫£i)
      const yOffset = -350;  // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ d·ªçc (l√™n/xu·ªëng)
  
      // T√≠nh to√°n th·ªùi gian bay linh ho·∫°t
      const distance = Math.sqrt(xDistance ** 2 + yDistance ** 2);
      const duration = Math.min(4, Math.max(0.5, distance / 500));
  
      const imgClone = productImage.cloneNode(true) as HTMLElement;
      this.renderer.addClass(imgClone, 'fly-image');
  
      // Set t·ªça ƒë·ªô ban ƒë·∫ßu
      imgClone.style.left = `${productRect.left}px`;
      imgClone.style.top = `${productRect.top}px`;
  
      // Set bi·∫øn ƒë·ªông X, Y v√† th·ªùi gian
      imgClone.style.setProperty('--x', `${xDistance}px`);
      imgClone.style.setProperty('--y', `${yDistance}px`);
      imgClone.style.setProperty('--x-offset', `${xOffset}px`);
      imgClone.style.setProperty('--y-offset', `${yOffset}px`);
      imgClone.style.setProperty('--duration', `${duration}s`);
  
      document.body.appendChild(imgClone);
  
      //  X√≥a ·∫£nh bay khi animation ho√†n t·∫•t
      setTimeout(() => {
        imgClone.remove();
      }, duration * 1000);
    }
  }
  

  onBuyNow() {
    if (!this.selectedVariant) {
      this.toastr.warning('Vui l√≤ng ch·ªçn s·∫£n ph·∫©m!', 'Th√¥ng b√°o');
      return;
    }
    if (this.selectedVariant.stockQuantity < this.quantity) {
      this.toastr.error(`Ch·ªâ c√≤n ${this.selectedVariant.stockQuantity} s·∫£n ph·∫©m trong kho!`, 'L·ªói');
      return;
    }

    const userId = this.tokenService.getUserId();
    if (!userId) {
      this.toastr.error('Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi mua h√†ng!', 'L·ªói');
      return;
    }

    this.cartService.addItemToCart(this.selectedVariant.variantId, this.quantity).subscribe(
      (response) => {
        this.toastr.success('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng! ƒêang chuy·ªÉn ƒë·∫øn thanh to√°n...', 'Th√†nh c√¥ng');
        setTimeout(() => {
          window.location.href = '/checkout';
        }, 1000);
      },
      (error) => {
        this.toastr.error('L·ªói khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i!', 'L·ªói');
      }
    );
  }
}
