import { Component, OnInit } from '@angular/core';
import { CartService } from 'src/app/service/cart.service';
import { OrderService } from 'src/app/service/order.service';
import { PaymentService } from 'src/app/service/payment.service';
import { UserAddressService } from 'src/app/service/user-address.service';
import { ProductVariantService } from 'src/app/service/product-variant.service';
import { PaymentMethodService } from 'src/app/service/payment-method.service';
import { ToastrService } from 'ngx-toastr';
import { TokenService } from 'src/app/service/token.service';
import { Router } from '@angular/router';
import { ShipMethodService } from 'src/app/service/ship-method.service';
import { ShipMethod } from 'src/app/types/ship-method';
import { UserAddress } from 'src/app/types/user-address';
import { initAOS } from 'src/assets/aos-init';

import { VoucherService } from 'src/app/service/voucher.service';
import { Voucher } from 'src/app/types/voucher'
@Component({
  selector: 'app-checkout',
  templateUrl: './checkout.component.html',
  styleUrls: ['./checkout.component.scss']
})
export class CheckoutComponent implements OnInit {
  // D·ªØ li·ªáu gi·ªè h√†ng
  cartItems: any[] = [];
  totalPrice: number = 0;
  productVariants: { [variantId: number]: any } = {};

  // Ph∆∞∆°ng th·ª©c thanh to√°n
  paymentMethod: string = '';
  paymentMethods: any[] = [];


  voucherCode: string = '';
  activeVoucher: Voucher | null = null;



  paymentIcons: { [key: string]: string } = {
    'COD': 'https://cdn.haitrieu.com/wp-content/uploads/2022/10/Logo-VNPAY-QR-1.png',
    'momo': 'https://cdn.haitrieu.com/wp-content/uploads/2022/10/Logo-VNPAY-QR-1.png',
    'vnpay': 'https://cdn.haitrieu.com/wp-content/uploads/2022/10/Logo-VNPAY-QR-1.png',
    'paypal': 'https://cdn.haitrieu.com/wp-content/uploads/2022/10/Logo-VNPAY-QR-1.png'
  };
  constructor(
    private cartService: CartService,
    private orderService: OrderService,
    private paymentService: PaymentService,
    private userAddressService: UserAddressService,
    private productVariantService: ProductVariantService,
    private paymentMethodService: PaymentMethodService,
    private toastr: ToastrService,
    private tokenService: TokenService,
    private router: Router,
    private shipMethodService: ShipMethodService,
    private voucherService: VoucherService
  ) { }

  ngOnInit(): void {
    this.loadCart();
    this.loadPaymentMethods();
    this.loadUserAddresses();
    this.loadShippingMethods();
    initAOS();
  }

   // Bi·∫øn hi·ªÉn th·ªã loading khi x·ª≠ l√Ω thanh to√°n
   isProcessingPayment: boolean = false;

  // ƒê·ªãa ch·ªâ giao h√†ng
  userAddresses: UserAddress[] = [];
  selectedAddressId: number | null = null;
  showAddressForm: boolean = false;
  // Th√™m bi·∫øn ƒë·ªÉ toggle danh s√°ch l·ª±a ch·ªçn ƒë·ªãa ch·ªâ
  showAddressSelection: boolean = false;

  // Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
  shippingMethods: ShipMethod[] = [];
  selectedShippingMethodId: number = 0;
  // Th√™m bi·∫øn ƒë·ªÉ toggle danh s√°ch l·ª±a ch·ªçn ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
  showShippingSelection: boolean = false;

  // D·ªØ li·ªáu cho form th√™m/s·ª≠a ƒë·ªãa ch·ªâ
  newAddress: UserAddress = {
    addressId: 0,
    userId: 0,
    addressLine: '',
    city: '',
    district: '',
    ward: '',
    isDefault: true
  };
  applyVoucher() {
    if (!this.voucherCode.trim()) {
        this.toastr.warning('Vui l√≤ng nh·∫≠p m√£ gi·∫£m gi√°!', 'Th√¥ng b√°o');
        return;
    }

    this.voucherService.getVoucherByCode(this.voucherCode).subscribe({
        next: (voucher) => {
          

            if (!voucher) {
                this.toastr.error('Kh√¥ng t√¨m th·∫•y voucher!', 'Th·∫•t b·∫°i');
                return;
            }

            const expiryDate = new Date(voucher.expiryDate);
            const currentTime = new Date();

            // ‚úÖ Ki·ªÉm tra n·∫øu `voucher.quantity` b·∫±ng 0
            if (voucher.quantity <= 0) {
                this.toastr.error('M√£ gi·∫£m gi√° ƒë√£ h·∫øt s·ªë l∆∞·ª£ng s·ª≠ d·ª•ng!', 'Th·∫•t b·∫°i');
                this.activeVoucher = null;
                return;
            }

            // ‚úÖ Ki·ªÉm tra n·∫øu voucher kh√¥ng ho·∫°t ƒë·ªông
            if (!voucher.active) {
                this.toastr.error('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a!', 'Th·∫•t b·∫°i');
                this.activeVoucher = null;
                return;
            }

            // ‚úÖ Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng
            if (expiryDate.getTime() < currentTime.getTime()) {
                this.toastr.error('M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n!', 'Th·∫•t b·∫°i');
                this.activeVoucher = null;
                return;
            }

            // ‚úÖ N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán h·ª£p l·ªá, √°p d·ª•ng voucher
            this.activeVoucher = voucher;
            this.toastr.success(`√Åp d·ª•ng th√†nh c√¥ng: ${voucher.voucherCode}!`, 'Th√†nh c√¥ng');
        },
        error: (error) => {
            this.toastr.error('M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt s·ªë l∆∞·ª£ng!', 'Th·∫•t b·∫°i');
            this.activeVoucher = null;
        }
    });
}


  // ‚úÖ X√≥a m√£ gi·∫£m gi√°
  removeVoucher() {
    this.activeVoucher = null;
    this.voucherCode = '';
  }

  // ‚úÖ T√≠nh s·ªë ti·ªÅn ƒë∆∞·ª£c gi·∫£m t·ª´ voucher
  getVoucherDiscount(): number {
    if (!this.activeVoucher) return 0;

    let discount = 0;
    if (this.activeVoucher.discountType === 'FIXED_AMOUNT') {
      discount = this.activeVoucher.discountAmount;
    } else if (this.activeVoucher.discountType === 'PERCENTAGE') {
      discount = (this.totalPrice * this.activeVoucher.discountAmount) / 100;
      if (this.activeVoucher.maxDiscount) {
        discount = Math.min(discount, this.activeVoucher.maxDiscount);
      }
    }

    return Math.min(discount, this.totalPrice);
  }

  // ‚úÖ T√≠nh t·ªïng gi√° cu·ªëi c√πng (Sau gi·∫£m gi√°)
  getFinalTotal(): number {
    return this.totalPrice + this.getShippingFee() - this.getVoucherDiscount();
  }

  goBackToCart(){
    this.router.navigate(['/cart']);
  }

  // L·∫•y gi·ªè h√†ng
  loadCart() {
    this.cartService.getCart().subscribe(
      (data) => {
        this.cartItems = data.cartItems;
        this.calculateTotal();
        this.loadProductDetails();
      },
      () => this.toastr.error('Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng!', 'L·ªói')
    );
  }

  // T√≠nh t·ªïng ti·ªÅn
  calculateTotal() {
    this.totalPrice = this.cartItems.reduce(
      (sum, item) => sum + (this.getVariantDetails(item.variantId, 'price') * item.quantity),
      0
    );
  }

  // L·∫•y th√¥ng tin bi·∫øn th·ªÉ s·∫£n ph·∫©m
  loadProductDetails() {
    const variantIds = this.cartItems.map((item) => item.variantId);
    variantIds.forEach((variantId) => {
      this.loadProductVariant(variantId);
    });
  }

  loadProductVariant(variantId: number) {
    this.productVariantService.getVariantById(variantId).subscribe(
      (variant) => {
        this.productVariants[variantId] = {
          size: variant.size || 'N/A',
          color: variant.color || 'N/A',
          imageUrl: variant.imageUrl && variant.imageUrl !== 'N/A' ? variant.imageUrl : 'assets/images/default-product.jpg',
          price: variant.price || 0
        };
        this.calculateTotal();
      },
      () => {
        this.productVariants[variantId] = {
          size: 'N/A',
          color: 'N/A',
          imageUrl: 'assets/images/default-product.jpg',
          price: 0
        };
        this.calculateTotal();
      }
    );
  }

  // L·∫•y ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
  loadShippingMethods() {
    this.shipMethodService.getAllShipMethods().subscribe({
      next: (data: ShipMethod[]) => {
        // console.log("‚úÖ API tr·∫£ v·ªÅ ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn:", data);
        if (!Array.isArray(data) || data.length === 0) {
          // console.error("API kh√¥ng tr·∫£ v·ªÅ m·∫£ng h·ª£p l·ªá ho·∫∑c r·ªóng!", data);
          this.shippingMethods = [];
          return;
        }
        this.shippingMethods = data;
        if (!this.selectedShippingMethodId && this.shippingMethods.length > 0) {
          this.selectedShippingMethodId = this.shippingMethods[0].ship_method_id;
        }
      },
      error: (error) => {
        // console.error("L·ªói khi t·∫£i ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn:", error);
        this.toastr.error("Kh√¥ng th·ªÉ t·∫£i ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn!", "L·ªói");
      }
    });
  }

  selectShippingMethod(method: ShipMethod) {
    if (!method || !method.ship_method_id) {
      this.toastr.warning("Ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn kh√¥ng h·ª£p l·ªá!", "Th√¥ng b√°o");
      return;
    }
    this.selectedShippingMethodId = method.ship_method_id;
    this.showShippingSelection = false; // ·∫©n danh s√°ch sau khi ch·ªçn
    // console.log("üöÄ ƒê√£ ch·ªçn ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn:", method);
  }

  getShippingFee(): number {
    const selectedMethod = this.shippingMethods.find(m => m.ship_method_id === this.selectedShippingMethodId);
    return selectedMethod ? selectedMethod.shippingFee : 0;
  }

  // L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n
  loadPaymentMethods() {
    this.paymentMethodService.getAllPaymentMethods().subscribe(
      (data) => {
        this.paymentMethods = data.map(method => ({
          ...method,
          iconUrl: this.paymentIcons[method.code] || this.paymentIcons['COD']
        }));
      },
      () => this.toastr.error('Kh√¥ng th·ªÉ t·∫£i ph∆∞∆°ng th·ª©c thanh to√°n!', 'L·ªói')
    );
  }

  // L·∫•y danh s√°ch ƒë·ªãa ch·ªâ giao h√†ng
  loadUserAddresses() {
    const userId = this.tokenService.getUserId();
    this.userAddressService.getAddressesByUserId(userId).subscribe(
      (data) => {
        if (!Array.isArray(data)) {
          // console.error('L·ªói: API tr·∫£ v·ªÅ kh√¥ng ph·∫£i m·∫£ng', data);
          this.userAddresses = [];
          return;
        }
        this.userAddresses = data;
        if (data.length > 0) {
          this.selectedAddressId = data.find(addr => addr.isDefault)?.addressId || data[0].addressId;
        }
      },
      () => this.toastr.error('Kh√¥ng th·ªÉ t·∫£i ƒë·ªãa ch·ªâ c·ªßa b·∫°n!', 'L·ªói')
    );
  }

  // Ch·ªçn ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
  setDefaultAddress(addressId: number) {
    this.userAddresses.forEach(addr => addr.isDefault = addr.addressId === addressId);
    this.selectedAddressId = addressId;
    this.showAddressSelection = false; // ·∫©n danh s√°ch sau khi ch·ªçn
  }

  // H√†m tr·ª£ gi√∫p: tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ƒë·ªãa ch·ªâ theo ID
  getAddress(addressId: number): UserAddress | undefined {
    return this.userAddresses.find(address => address.addressId === addressId);
  }

  // H√†m tr·ª£ gi√∫p: tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn theo ID
  getShippingMethod(methodId: number): ShipMethod | undefined {
    return this.shippingMethods.find(method => method.ship_method_id === methodId);
  }

  // Toggle hi·ªÉn th·ªã form th√™m/s·ª≠a ƒë·ªãa ch·ªâ
  toggleAddressForm(editing: boolean = false, address: UserAddress | null = null) {
    this.showAddressForm = !this.showAddressForm;
    if (editing && address) {
      this.newAddress = { ...address };
    } else {
      this.newAddress = {
        userId: this.tokenService.getUserId(),
        addressLine: '',
        city: '',
        district: '',
        ward: '',
        isDefault: false
      } as UserAddress;
    }
  }

  // Toggle hi·ªÉn th·ªã danh s√°ch ƒë·ªãa ch·ªâ (ƒë·ªÉ l·ª±a ch·ªçn)
  toggleAddressSelection(): void {
    this.showAddressSelection = !this.showAddressSelection;
  }

  // Toggle hi·ªÉn th·ªã danh s√°ch ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn (ƒë·ªÉ l·ª±a ch·ªçn)
  toggleShippingSelection(): void {
    this.showShippingSelection = !this.showShippingSelection;
  }

  // L∆∞u ƒë·ªãa ch·ªâ m·ªõi / c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
  saveAddress() {
    if (this.newAddress.addressId && this.userAddresses.find(addr => addr.addressId === this.newAddress.addressId)) {
      // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
      this.userAddressService.updateAddress(this.newAddress.addressId, this.newAddress).subscribe(
        () => {
          this.toastr.success('C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng!');
          this.loadUserAddresses();
          this.showAddressForm = false;
        },
        () => this.toastr.error('L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ!')
      );
    } else {
      // T·∫°o ƒë·ªãa ch·ªâ m·ªõi
      this.userAddressService.createAddress(this.newAddress).subscribe(
        () => {
          this.toastr.success('Th√™m ƒë·ªãa ch·ªâ m·ªõi th√†nh c√¥ng!');
          this.loadUserAddresses();
          this.showAddressForm = false;
        },
        () => this.toastr.error('L·ªói khi th√™m ƒë·ªãa ch·ªâ!')
      );
    }
  }

  // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ productVariants
  getVariantDetails(variantId: number, key: 'size' | 'color' | 'imageUrl' | 'price'): any {
    return this.productVariants[variantId]?.[key] || (key === 'price' ? 0 : 'N/A');
  }

  // ƒê·∫∑t h√†ng (Checkout + Thanh to√°n)
  placeOrder() {
    if (!this.selectedAddressId) {
      this.toastr.warning('Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng!', 'Th√¥ng b√°o');
      return;
    }
    if (!this.paymentMethod) {
      this.toastr.warning('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n!', 'Th√¥ng b√°o');
      return;
    }
    if (!this.selectedShippingMethodId) {
      this.toastr.warning('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn!', 'Th√¥ng b√°o');
      return;
    }

    const userId = this.tokenService.getUserId();

    // this.orderService.checkout(userId, this.selectedAddressId, this.selectedShippingMethodId,this.activeVoucher?.voucherCode).subscribe(
    //   (order) => {
    //     this.processPayment(order.orderId);
    //   },
    //   (error) => {
    //     // console.error("üö® L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
    //     this.toastr.error(error.error?.message || 'L·ªói khi t·∫°o ƒë∆°n h√†ng!', 'Th·∫•t b·∫°i');
    //   }
    // );
    this.orderService.checkout(userId, this.selectedAddressId, this.selectedShippingMethodId, this.activeVoucher?.voucherCode)
      .subscribe({
        next: (order) => {
          // Sau khi checkout th√†nh c√¥ng, g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
          this.orderService.sendOrderMail(order.orderId).subscribe({
            next: () => {
              this.toastr.success('Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n!');
            },
            error: (err) => {
              this.toastr.error('L·ªói g·ª≠i email x√°c nh·∫≠n: ' + err);
            }
          });

          // Sau ƒë√≥, x·ª≠ l√Ω thanh to√°n
          this.processPayment(order.orderId);
        },
        error: (error) => {
          this.toastr.error(error.error?.message || 'L·ªói khi t·∫°o ƒë∆°n h√†ng!', 'Th·∫•t b·∫°i');
        }
      });
  }

  // X·ª≠ l√Ω thanh to√°n
  processPayment(orderId: number) {
    // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã loading
    this.isProcessingPayment = true;

    this.paymentService.createPayment(orderId, this.paymentMethod).subscribe({
      next: (response: string) => {
        // K·∫øt th√∫c loading
        this.isProcessingPayment = false;
        if (response.startsWith('http')) {
          window.location.href = response;
        } else {
          this.router.navigate(['/payment-result'], { queryParams: { status: 'success' } });
        }
      },
      error: () => {
        this.isProcessingPayment = false;
        this.router.navigate(['/payment-result'], { queryParams: { status: 'failed' } });
      }
    });
  }
}
