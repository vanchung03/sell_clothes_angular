import { Component, EventEmitter, OnInit, Output } from '@angular/core';
import { OrderService } from 'src/app/service/order.service';
import { Order } from 'src/app/types/order';
import { Router } from '@angular/router';
import { ShipMethodService } from 'src/app/service/ship-method.service'; // ‚¨Ö import
import { ShipMethod } from 'src/app/types/ship-method';

@Component({
  selector: 'app-orders-list-new',
  templateUrl: './orders-list-new.component.html',
  styleUrls: ['./orders-list-new.component.scss']
})
export class OrdersListNewComponent implements OnInit {
  // Danh s√°ch ƒë∆°n h√†ng g·ªëc v√† ƒë∆∞·ª£c l·ªçc
  orders: Order[] = [];
  filteredOrders: Order[] = [];

  // S·ª± ki·ªán ƒë√≥ng modal
  @Output() closeModal = new EventEmitter<void>();

  // Danh s√°ch tr·∫°ng th√°i v·ªõi nh√£n ti·∫øng Vi·ªát
  statusList = ['T·∫§T C·∫¢', 'ƒêANG X·ª¨ L√ù', 'ƒê√É X√ÅC NH·∫¨N', 'ƒêANG GIAO', 'HO√ÄN TH√ÄNH', 'ƒê√É H·ª¶Y'];
  selectedStatus = 'T·∫§T C·∫¢';
  orderCode: string = '';

  // Tr·∫°ng th√°i t·∫£i v√† l·ªói
  isLoading = false;
  errorMessage = '';

  constructor(private orderService: OrderService,
    private router: Router,
    private shipMethodService: ShipMethodService // ÔøΩÔøΩÔøΩÔ∏è import
  ) { }

  ngOnInit(): void {
    this.fetchOrdersByUser();
  }

  // ƒê√≥ng danh s√°ch ƒë∆°n h√†ng
  closeOrders() {
    this.closeModal.emit();
  }

  // Chuy·ªÉn ƒë·ªïi nh√£n tr·∫°ng th√°i sang ti·∫øng Vi·ªát
  getStatusLabel(status: string): string {
    const statusMap: { [key: string]: string } = {
      'ALL': 'T·∫•t c·∫£',
      'PENDING': 'ƒêang x·ª≠ l√Ω',
      'CONFIRMED': 'ƒê√£ x√°c nh·∫≠n',
      'SHIPPING': 'ƒêang giao',
      'COMPLETED': 'Ho√†n th√†nh',
      'CANCELLED': 'ƒê√£ h·ªßy',
      'T·∫§T C·∫¢': 'T·∫•t c·∫£',
      'ƒêANG X·ª¨ L√ù': 'ƒêang x·ª≠ l√Ω',
      'ƒê√É X√ÅC NH·∫¨N': 'ƒê√£ x√°c nh·∫≠n',
      'ƒêANG GIAO': 'ƒêang giao',
      'HO√ÄN TH√ÄNH': 'Ho√†n th√†nh',
      'ƒê√É H·ª¶Y': 'ƒê√£ h·ªßy'
    };
    return statusMap[status] || status;
  }

  // L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng
  // G·ªçi API l·∫•y ƒë∆°n h√†ng
  fetchOrdersByUser(): void {
    this.isLoading = true;
    this.orderService.getOrdersByUser().subscribe({
      next: (response) => {
        this.orders = response.map(order => {
          const createdAt = order.createdAt ? new Date(order.createdAt) : new Date();
          const isValid = !isNaN(createdAt.getTime());
          console.log('üßæ Order:', order.orderId, '| createdAt:', order.createdAt, '| Parsed:', createdAt, '| Valid:', isValid);
        
          return {
            ...order,
            createdAt: isValid ? createdAt : null
          };
        });
        
        // G·ªåI shipMethodService CHO M·ªñI ƒê∆†N H√ÄNG
        this.orders.forEach(order => {
          if (order.shipMethodId) {
            // L·∫•y th√¥ng tin shipMethod
            this.shipMethodService.getShipMethodById(order.shipMethodId).subscribe({
              next: (method) => {
                order.shipMethod = method;
              },
              error: (err) => {
              }
            });
          } else {
            order.shipMethod.name = 'Kh√¥ng c√≥';
          }
        });

        // L∆∞u m·∫£ng filteredOrders
        this.filteredOrders = this.orders;
        this.isLoading = false;
      },
      error: (error) => {
        this.errorMessage = 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau.';
        this.isLoading = false;
        console.error('L·ªói khi t·∫£i ƒë∆°n h√†ng:', error);
      }
    });
  }
  // L·ªçc ƒë∆°n h√†ng theo m√£ v√† tr·∫°ng th√°i
  filterOrders(): void {
    const code = this.orderCode.toLowerCase().trim();
    this.filteredOrders = this.orders.filter((order) => {
      // Ki·ªÉm tra tr·∫°ng th√°i
      const matchesStatus =
        this.selectedStatus === 'T·∫§T C·∫¢' ||
        this.getStatusLabel(order.status).toUpperCase() === this.selectedStatus;

      // Ki·ªÉm tra m√£ ƒë∆°n h√†ng
      const matchesCode = code
        ? order.orderId.toString().toLowerCase().includes(code)
        : true;

      return matchesStatus && matchesCode;
    });
  }

  // Ch·ªçn tr·∫°ng th√°i l·ªçc
  onSelectStatus(status: string): void {
    this.selectedStatus = status;
    this.filterOrders();
  }

  // Thay ƒë·ªïi m√£ ƒë∆°n h√†ng
  onOrderCodeChange(): void {
    this.filterOrders();
  }

  // Xem chi ti·∫øt ƒë∆°n h√†ng
  onViewDetails(order: Order) {
    this.router.navigate(['/order-details-new', order.orderId]);
  }


  parseDate(dateStr: any): string {
    if (!dateStr) {
      console.warn('‚ö†Ô∏è dateStr is null or undefined');
      return 'Kh√¥ng c√≥';
    }
  
    try {
      let date: Date;
  
      if (Array.isArray(dateStr) && dateStr.length >= 6) {
        // D·∫°ng [2025, 4, 16, 2, 22, 21, ...]
        const [year, month, day, hour, minute, second] = dateStr;
        date = new Date(year, month - 1, day, hour, minute, second);
      } else if (dateStr instanceof Date) {
        date = dateStr;
      } else if (typeof dateStr === 'string' || typeof dateStr === 'number') {
        date = new Date(dateStr);
      } else {
        console.warn('‚ùå Kh√¥ng h·ªó tr·ª£ ki·ªÉu d·ªØ li·ªáu date:', dateStr);
        return 'Kh√¥ng x√°c ƒë·ªãnh';
      }
  
      if (isNaN(date.getTime())) {
        console.warn('‚ùå Gi√° tr·ªã ng√†y kh√¥ng h·ª£p l·ªá:', dateStr);
        return 'Kh√¥ng h·ª£p l·ªá';
      }
  
      const dayStr = date.getDate().toString().padStart(2, '0');
      const monthStr = (date.getMonth() + 1).toString().padStart(2, '0');
      const yearStr = date.getFullYear();
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      const seconds = date.getSeconds().toString().padStart(2, '0');
  
      const formatted = `${dayStr}/${monthStr}/${yearStr} ${hours}:${minutes}:${seconds}`;
      console.log('‚úÖ ƒê·ªãnh d·∫°ng th√†nh c√¥ng:', dateStr, '‚Üí', formatted);
      return formatted;
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒë·ªãnh d·∫°ng ng√†y:', dateStr, '| Error:', error);
      return 'L·ªói';
    }
  }
  
  
}