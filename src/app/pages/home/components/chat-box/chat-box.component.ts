import { Component, OnInit, OnDestroy, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';
import { Subscription } from 'rxjs';
import { ChatService, ChatMessage } from 'src/app/service/chat.service';
import { ProductService } from 'src/app/service/product.service';
import { Product } from 'src/app/types/products';

@Component({
  selector: 'app-chat-box',
  templateUrl: './chat-box.component.html',
  styleUrls: ['./chat-box.component.scss']
})
export class ChatBoxComponent implements OnInit, OnDestroy, AfterViewChecked {
  @ViewChild('messagesContainer') private messagesContainer?: ElementRef;
  
  isChatVisible: boolean = false;
  messages: ChatMessage[] = [];
  newMessage: string = '';
  sessionId: string = '';
  isConnected: boolean = false;
  username: string = 'User';
  isTyping: boolean = false;
  
  // Th√™m bi·∫øn cho s·∫£n ph·∫©m
  relatedProducts: Product[] = [];
  showProducts: boolean = false;
  
  private messagesSubscription?: Subscription;
  private connectionSubscription?: Subscription;
  
  constructor(
    private chatService: ChatService,
    private productService: ProductService
  ) {
    // T·∫°o session ID khi kh·ªüi t·∫°o component
    this.sessionId = crypto.randomUUID();
    
    // X√≥a tin nh·∫Øn c≈©
    this.chatService.clearMessages();
    
    // Th√™m tin nh·∫Øn ch√†o m·ª´ng
    this.chatService.addSystemMessage('üëó Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Serenity - c·ª≠a h√†ng th·ªùi trang hi·ªán ƒë·∫°i v√† phong c√°ch!');
   }
  
  ngOnInit(): void {
    // ƒêƒÉng k√Ω theo d√µi tin nh·∫Øn v√† tr·∫°ng th√°i k·∫øt n·ªëi
    this.messagesSubscription = this.chatService.messages$.subscribe(messages => {
      this.messages = messages;
      
      // Ki·ªÉm tra tin nh·∫Øn m·ªõi nh·∫•t c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ ph√¢n t√≠ch
      if (messages.length > 0) {
        const lastMessage = messages[messages.length - 1];
        if (lastMessage.sender === this.username) {
          this.analyzeUserMessage(lastMessage.content);
        }
      }
    });
    
    this.connectionSubscription = this.chatService.connectionStatus$.subscribe(isConnected => {
      this.isConnected = isConnected;
    });
    
    // K·∫øt n·ªëi v·ªõi chat
    this.connectToChat();
  }
  
  ngOnDestroy(): void {
    // D·ªçn d·∫πp c√°c subscription
    this.messagesSubscription?.unsubscribe();
    this.connectionSubscription?.unsubscribe();
    this.chatService.disconnect();
  }
  
  ngAfterViewChecked(): void {
    this.scrollToBottom();
  }
  
  private scrollToBottom(): void {
    if (this.messagesContainer) {
      const element = this.messagesContainer.nativeElement;
      element.scrollTop = element.scrollHeight;
    }
  }
  
  connectToChat(): void {
    this.chatService.connectToChat(this.sessionId);
  }
  
  sendMessage(): void {
    if (this.newMessage.trim() !== '' && this.isConnected) {
      const chatMessage: ChatMessage = {
        id: crypto.randomUUID(),
        content: this.newMessage,
        sender: this.username,
        type: 'CHAT',
        timestamp: new Date()
      };
      
      // G·ª≠i tin nh·∫Øn qua service
      this.chatService.sendMessage(this.sessionId, chatMessage);
      this.newMessage = '';
    }
  }
  
  clearChat(): void {
    this.chatService.clearMessages();
    this.relatedProducts = [];
    this.showProducts = false;
  }
  
  toggleChat(): void {
    this.isChatVisible = !this.isChatVisible;
    if (this.isChatVisible) {
      setTimeout(() => {
        this.scrollToBottom();
      }, 100);
    }
  }
  
  // Ph√¢n t√≠ch tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh nhu c·∫ßu t√¨m ki·∫øm s·∫£n ph·∫©m
  private analyzeUserMessage(message: string): void {
    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang g√µ
    this.showTypingIndicator();
    
    // T·ª´ kh√≥a li√™n quan ƒë·∫øn th·ªùi trang
    const fashionKeywords = [
      'v√°y', 'ƒë·∫ßm', '√°o', 'qu·∫ßn', 'gi√†y', 'd√©p', 't√∫i', 'v√≠', 'th·∫Øt l∆∞ng', 'ph·ª• ki·ªán',
      '√°o s∆° mi', '√°o thun', '√°o ph√¥ng', '√°o kho√°c', '√°o len', '√°o d√†i',
      'qu·∫ßn jean', 'qu·∫ßn √¢u', 'qu·∫ßn short', 'qu·∫ßn kaki', 'qu·∫ßn jogger',
      'v√°y d√†i', 'v√°y ng·∫Øn', 'ch√¢n v√°y', 'ƒë·∫ßm d·∫° h·ªôi', 'ƒë·∫ßm d·ª± ti·ªác',
      'gi√†y cao g√≥t', 'gi√†y th·ªÉ thao', 'gi√†y sandal', 'boot',
      't√∫i x√°ch', 't√∫i ƒëeo ch√©o', 'balo', 'v√≠ c·∫ßm tay',
      'th·ªùi trang', 'style', 'phong c√°ch', 'xu h∆∞·ªõng', 'trend'
    ];
    
    // Chuy·ªÉn tin nh·∫Øn th√†nh ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ so s√°nh
    const lowerMessage = message.toLowerCase();
    
    // T√¨m t·ª´ kh√≥a th·ªùi trang trong tin nh·∫Øn
    let foundKeywords = fashionKeywords.filter(keyword => lowerMessage.includes(keyword));
    
    if (foundKeywords.length > 0) {
      // N·∫øu t√¨m th·∫•y t·ª´ kh√≥a th·ªùi trang, t√¨m ki·∫øm s·∫£n ph·∫©m li√™n quan
      const searchTerm = foundKeywords[0]; // L·∫•y t·ª´ kh√≥a ƒë·∫ßu ti√™n ƒë·ªÉ t√¨m ki·∫øm
      this.searchProducts(searchTerm);
    } else if (this.containsProductQuestion(lowerMessage)) {
      // N·∫øu c√≥ c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m nh∆∞ng kh√¥ng c√≥ t·ª´ kh√≥a c·ª• th·ªÉ, t√¨m ki·∫øm v·ªõi t·ª´ "th·ªùi trang"
      this.searchProducts('th·ªùi trang');
    }
  }
  
  // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ch·ª©a c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m kh√¥ng
  private containsProductQuestion(message: string): boolean {
    const questionKeywords = [
      'c√≥', 'b√°n', 'gi√°', 'bao nhi√™u', 'm√†u', 'size', 'k√≠ch th∆∞·ªõc', 
      'ch·∫•t li·ªáu', 'm·∫´u', 'lo·∫°i', 'h√†ng', 's·∫£n ph·∫©m', 'ƒë·ªì', 
      't∆∞ v·∫•n', 'g·ª£i √Ω', 'recommend', 't√¨m', 'mua', 'order', 'ƒë·∫∑t'
    ];
    
    return questionKeywords.some(keyword => message.includes(keyword));
  }
  
  // T√¨m ki·∫øm s·∫£n ph·∫©m t·ª´ API
  private searchProducts(keyword: string): void {
    this.productService.searchProducts(keyword).subscribe({
      next: (products) => {
        this.relatedProducts = products.slice(0, 5); // Gi·ªõi h·∫°n 5 s·∫£n ph·∫©m
        this.showProducts = this.relatedProducts.length > 0;
        
        // T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n k·∫øt qu·∫£ t√¨m ki·∫øm
        this.createProductResponse(keyword, this.relatedProducts);
        
        // ·∫®n tr·∫°ng th√°i ƒëang g√µ
        this.hideTypingIndicator();
      },
      error: (error) => {
        console.error('L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m:', error);
        
        // Ph·∫£n h·ªìi l·ªói
        this.chatService.addSystemMessage('R·∫•t ti·∫øc, m√¨nh kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m ph√π h·ª£p. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n kh√¥ng?');
        
        // ·∫®n tr·∫°ng th√°i ƒëang g√µ
        this.hideTypingIndicator();
      }
    });
  }
  
  // T·∫°o ph·∫£n h·ªìi v·ªÅ s·∫£n ph·∫©m
  private createProductResponse(keyword: string, products: Product[]): void {
    if (products.length === 0) {
      this.chatService.addSystemMessage(`R·∫•t ti·∫øc, m√¨nh kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m "${keyword}" n√†o. B·∫°n c√≥ th·ªÉ quan t√¢m ƒë·∫øn s·∫£n ph·∫©m kh√°c kh√¥ng?`);
      return;
    }
    
    // T·∫°o ph·∫£n h·ªìi v·ªõi th√¥ng tin s·∫£n ph·∫©m
    let response = `M√¨nh ƒë√£ t√¨m th·∫•y ${products.length} s·∫£n ph·∫©m "${keyword}" c√≥ th·ªÉ b·∫°n s·∫Ω th√≠ch:\n\n`;
    
    // Kh√¥ng li·ªát k√™ s·∫£n ph·∫©m trong tin nh·∫Øn v√¨ s·∫Ω hi·ªÉn th·ªã trong card
    response += `B·∫°n c√≥ th·ªÉ xem chi ti·∫øt b√™n d∆∞·ªõi. B·∫°n c√≥ c·∫ßn th√™m th√¥ng tin g√¨ v·ªÅ c√°c s·∫£n ph·∫©m n√†y kh√¥ng?`;
    
    this.chatService.addSystemMessage(response);
  }
  
  // Hi·ªÉn th·ªã s·∫£n ph·∫©m chi ti·∫øt
  showProductDetail(product: Product): void {
    // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
    let detailMessage = `üìå Th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m "${product.name}":\n\n`;
    detailMessage += `üí∞ Gi√°: ${product.price.toLocaleString('vi-VN')}ƒë\n`;
    
    if (product.salePrice && product.salePrice < product.price) {
      const discountPercent = Math.round((1 - product.salePrice / product.price) * 100);
      detailMessage += `üî• Gi√° khuy·∫øn m√£i: ${product.salePrice.toLocaleString('vi-VN')}ƒë (Gi·∫£m ${discountPercent}%)\n`;
    }
    
    detailMessage += `üìù M√¥ t·∫£: ${product.description}\n\n`;
    detailMessage += `B·∫°n c√≥ mu·ªën ƒë·∫∑t mua s·∫£n ph·∫©m n√†y kh√¥ng?`;
    
    this.chatService.addSystemMessage(detailMessage);
  }
  
  // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang g√µ
  private showTypingIndicator(): void {
    this.isTyping = true;
    this.chatService.addSystemMessage('ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m...');
  }
  
  // ·∫®n tr·∫°ng th√°i ƒëang g√µ
  private hideTypingIndicator(): void {
    this.isTyping = false;
    
    // X√≥a tin nh·∫Øn "ƒëang t√¨m ki·∫øm" n·∫øu c√≥
    const currentMessages = this.messages;
    const typingMessageIndex = currentMessages.findIndex(m => 
      m.sender === 'system' && m.content === 'ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m...'
    );
    
    if (typingMessageIndex !== -1) {
      // X√≥a tin nh·∫Øn ƒëang g√µ
      this.chatService.removeMessage(typingMessageIndex);
    }
  }
}