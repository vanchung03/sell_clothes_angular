import { Component, OnInit } from '@angular/core';
import { CartService } from 'src/app/service/cart.service';
import { ProductVariantService } from 'src/app/service/product-variant.service';
import { ToastrService } from 'ngx-toastr';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.scss'],
})
export class CartComponent implements OnInit {
  cartItems: any[] = [];
  totalPrice = 0;
  productVariants: { [variantId: number]: any } = {}; // L∆∞u th√¥ng tin bi·∫øn th·ªÉ theo variantId
  productBrands: { [variantId: number]: any } = {}; // L∆∞u brand theo variantId
  deliveryDate: string = '';
  deliveryTime: string = '';
  exportInvoice: boolean = false;

  constructor(
    private cartService: CartService,
    private productVariantService: ProductVariantService,
    private toastr: ToastrService
  ) {}

  ngOnInit(): void {
    this.loadCart();
  }


  groupedCart: Record<string, any[]> = {}; // Khai b√°o ki·ªÉu d·ªØ li·ªáu r√µ r√†ng

  /**
   * üè∑ **Nh√≥m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu**
   */
  groupCartByBrand() {
    this.groupedCart = this.cartItems.reduce((groups: Record<string, any[]>, item) => {
      const brandName = this.getBrandDetails(item.variantId, 'name');
      if (!groups[brandName]) {
        groups[brandName] = [];
      }
      groups[brandName].push(item);
      return groups;
    }, {});
  }
  


  /**
   * üõí **T·∫£i gi·ªè h√†ng**
   */
  loadCart() {
    this.cartService.getCart().subscribe(
      (data) => {
        this.cartItems = data.cartItems;
        this.calculateTotal();
  
        // L·∫•y th√¥ng tin bi·∫øn th·ªÉ (size, color, image)
        const variantIds = this.cartItems.map((item) => item.variantId);
        variantIds.forEach((variantId) => {
          this.loadProductVariant(variantId);
          this.loadProductBrand(variantId);
        });
  
        // Ch·ªù m·ªôt ch√∫t ƒë·ªÉ d·ªØ li·ªáu brand ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        setTimeout(() => {
          this.groupCartByBrand();
        }, 500);
      },
      (error) => {
        this.toastr.error('Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng!', 'L·ªói');
      }
    );
  }
  

  /**
   * üì¶ **L·∫•y th√¥ng tin bi·∫øn th·ªÉ s·∫£n ph·∫©m (size, color, image)**
   */
  loadProductVariant(variantId: number) {
    this.productVariantService.getVariantById(variantId).subscribe(
      (variant) => {
        this.productVariants[variantId] = {
          size: variant.size || 'N/A',
          color: variant.color || 'N/A',
          imageUrl: variant.imageUrl || 'assets/images/default-product.jpg',
        };
      },
      (error) => {
        this.productVariants[variantId] = {
          size: 'N/A',
          color: 'N/A',
          imageUrl: 'assets/images/default-product.jpg',
        };
      }
    );
  }
   /**
   * üè∑ **L·∫•y Brand t·ª´ variantId**
   */
   loadProductBrand(variantId: number) {
    this.productVariantService.getBrandByVariantId(variantId).subscribe(
      (brand) => {
        this.productBrands[variantId] = {
          name: brand.name || 'Kh√¥ng c√≥ th√¥ng tin',
          logoUrl: brand.logoUrl || 'assets/images/default-brand.jpg',
        };
      },
      (error) => {
        this.productBrands[variantId] = {
          name: 'Kh√¥ng c√≥ th√¥ng tin',
          logoUrl: 'assets/images/default-brand.jpg',
        };
      }
    );
  }

  /**
   * üîç **L·∫•y th√¥ng tin bi·∫øn th·ªÉ t·ª´ variantId**
   */
  getVariantDetails(variantId: number, key: 'size' | 'color' | 'imageUrl'): string {
    return this.productVariants[variantId]?.[key] || 'N/A';
  }
     /**
   * üîç **L·∫•y th√¥ng tin Brand t·ª´ variantId**
   */
     getBrandDetails(variantId: number, key: 'name' | 'logoUrl'): string {
      return this.productBrands[variantId]?.[key] || 'N/A';
    }

  /**
   * üîÑ **C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m**
   */
  updateQuantity(item: any, change: number) {
    const newQuantity = item.quantity + change;

    if (newQuantity < 1) {
      this.toastr.warning('S·ªë l∆∞·ª£ng kh√¥ng th·ªÉ nh·ªè h∆°n 1!', 'Th√¥ng b√°o');
      return;
    }

    this.cartService.updateCartItem(item.variantId, newQuantity).subscribe(
      () => {
        item.quantity = newQuantity;
        item.totalPrice = newQuantity * item.unitPrice;
        this.calculateTotal();
        this.toastr.success('C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng!', 'Th√†nh c√¥ng');
      },
      (error) => {
        this.toastr.error('L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng!', 'L·ªói');
      }
    );
  }

  /**
   * ‚ùå **X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng**
   */
  /**
 * ‚ùå **X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng**
 */
removeFromCart(cartItemId: number) {
  this.cartService.removeItemFromCart(cartItemId).subscribe(
    () => {
      // C·∫≠p nh·∫≠t l·∫°i gi·ªè h√†ng sau khi x√≥a
      this.cartItems = this.cartItems.filter((item) => item.cartItemId !== cartItemId);
      this.calculateTotal();

      // G·ªçi l·∫°i nh√≥m s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán ngay l·∫≠p t·ª©c
      this.groupCartByBrand();

      this.toastr.success('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a!', 'Th√†nh c√¥ng');
    },
    (error) => {
      this.toastr.error('L·ªói khi x√≥a s·∫£n ph·∫©m!', 'L·ªói');
    }
  );
}

  /**
   * üßæ **T√≠nh t·ªïng ti·ªÅn**
   */
  calculateTotal() {
    this.totalPrice = this.cartItems.reduce((sum, item) => sum + item.totalPrice, 0);
  }

  /**
   * üí≥ **Thanh to√°n**
   */
  checkout() {
    if (this.cartItems.length === 0) {
      this.toastr.warning('Gi·ªè h√†ng tr·ªëng!', 'Th√¥ng b√°o');
      return;
    }
    this.toastr.success('Chuy·ªÉn ƒë·∫øn trang thanh to√°n...', 'Thanh to√°n');
    setTimeout(() => {
      window.location.href = '/checkout';
    }, 2000);
  }
}
